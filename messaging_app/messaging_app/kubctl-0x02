#!/bin/bash

# Blue-Green Deployment Controller
# Usage: ./kubectl-0x02 [deploy|switch|rollback|verify] [version]

set -euo pipefail

# Configuration
NAMESPACE="messaging"
SERVICE="messaging-app-service"
BLUE_DEPLOYMENT="messaging-app-blue"
GREEN_DEPLOYMENT="messaging-app-green"
TIMEOUT=300  # 5 minutes timeout for operations

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Show usage information
show_usage() {
  echo "${BLUE}Blue-Green Deployment Controller${NC}"
  echo "Usage: $0 [command] [version]\n"
  echo "Commands:"
  echo "  deploy <blue|green>   Deploy a new version (blue or green)"
  echo "  switch <blue|green>   Switch traffic to specified version"
  echo "  verify <blue|green>   Verify deployment status and logs"
  echo "  rollback              Rollback to previous version (blue)\n"
  echo "Examples:"
  echo "  $0 deploy green     # Deploy green version"
  echo "  $0 switch green     # Switch traffic to green"
  echo "  $0 verify green     # Verify green deployment"
  echo "  $0 rollback         # Rollback to blue version"
  exit 1
}

# Validate version parameter
validate_version() {
  local version=$1
  if [[ "$version" != "blue" && "$version" != "green" ]]; then
    echo -e "${RED}Error: Version must be 'blue' or 'green'${NC}"
    show_usage
    exit 1
  fi
}

# Get active version
get_active_version() {
  kubectl get svc $SERVICE -n $NAMESPACE \
    -o jsonpath='{.spec.selector.version}' 2>/dev/null || echo "none"
}

# Deploy new version
deploy_version() {
  local version=$1
  echo -e "${BLUE}Deploying $version version...${NC}"
  
  if [ "$version" == "green" ]; then
    kubectl apply -f k8s/green_deployment.yaml -n $NAMESPACE
  else
    kubectl apply -f k8s/blue_deployment.yaml -n $NAMESPACE
  fi
  
  # Wait for rollout
  echo -e "${BLUE}Waiting for $version deployment to complete...${NC}"
  if ! kubectl rollout status deployment/messaging-app-$version -n $NAMESPACE --timeout=${TIMEOUT}s; then
    echo -e "${RED}Error: $version deployment failed${NC}"
    exit 1
  fi
  
  echo -e "${GREEN}Successfully deployed $version version${NC}"
}

# Switch traffic
switch_traffic() {
  local target=$1
  local current=$(get_active_version)
  
  if [ "$target" == "$current" ]; then
    echo -e "${BLUE}Already on $target version${NC}"
    return 0
  fi
  
  echo -e "${BLUE}Switching traffic from $current to $target version...${NC}"
  kubectl patch service $SERVICE -n $NAMESPACE \
    -p "{\"spec\":{\"selector\":{\"version\":\"$target\"}}}"
  
  # Verify switch
  local new_active=$(get_active_version)
  if [ "$new_active" == "$target" ]; then
    echo -e "${GREEN}Successfully switched to $target version${NC}"
  else
    echo -e "${RED}Failed to switch to $target version${NC}"
    exit 1
  fi
}

# Verify deployment
verify_deployment() {
  local version=$1
  echo -e "${BLUE}Verifying $version deployment...${NC}"
  
  # Check pod status
  echo -e "\n${BLUE}Pod status:${NC}"
  if ! kubectl get pods -n $NAMESPACE -l version=$version; then
    echo -e "${RED}No pods found for version: $version${NC}"
    return 1
  fi
  
  # Check logs for errors
  echo -e "\n${BLUE}Log analysis (last 50 lines):${NC}"
  local pod=$(kubectl get pods -n $NAMESPACE -l version=$version -o name | head -n 1)
  if [ -z "$pod" ]; then
    echo -e "${RED}No pods found for version: $version${NC}"
    return 1
  fi
  
  kubectl logs -n $NAMESPACE $pod --tail=50 2>&1 | \
    grep -E -i 'error|exception|fail|warn' | \
    sort | uniq -c || true
  
  echo -e "\n${GREEN}Verification completed for $version version${NC}"
}

# Main execution
if [ $# -lt 1 ]; then
  show_usage
fi

case "$1" in
  deploy)
    if [ $# -lt 2 ]; then
      echo -e "${RED}Error: Specify version (blue or green)${NC}"
      show_usage
    fi
    validate_version "$2"
    deploy_version "$2"
    ;;
    
  switch)
    if [ $# -lt 2 ]; then
      echo -e "${RED}Error: Specify target version (blue or green)${NC}"
      show_usage
    fi
    validate_version "$2"
    switch_traffic "$2"
    ;;
    
  verify)
    if [ $# -lt 2 ]; then
      echo -e "${RED}Error: Specify version to verify (blue or green)${NC}"
      show_usage
    fi
    validate_version "$2"
    verify_deployment "$2"
    ;;
    
  rollback)
    current=$(get_active_version)
    if [ "$current" == "blue" ]; then
      echo -e "${BLUE}Already on blue version (safe version)${NC}"
      exit 0
    fi
    echo -e "${BLUE}Rolling back to blue version...${NC}"
    switch_traffic "blue"
    ;;
    
  -h|--help|help)
    show_usage
    ;;
    
  *)
    echo -e "${RED}Error: Unknown command: $1${NC}"
    show_usage
    ;;
esac