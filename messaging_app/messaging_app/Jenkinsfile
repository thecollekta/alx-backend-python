pipeline {
    agent any

    environment {
        // Replace with your GitHub repo and credentials ID
        REPO_URL = 'https://github.com/thecollekta/alx-backend-python.git'
        CREDENTIALS_ID = 'github-creds' // Jenkins GitHub credentials
        VENV = '.venv'
        
        // Docker environment variables
        DOCKER_IMAGE = 'collekta/messaging-app'  // Your Docker Hub Username
        DOCKER_TAG = "latest-${env.BUILD_ID}"
        DOCKER_REGISTRY_CREDENTIALS = 'dockerhub-creds' // Jenkins DockerHub credentials

        // Application path
        APP_PATH = 'messaging_app/messaging_app'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: "${CREDENTIALS_ID}", url: "${REPO_URL}"
            }
        }

        stage('Verify Structure') {
            steps {
                script {
                    // Debug: Check repository structure
                    sh '''
                    echo "Repository structure:"
                    ls -la
                    echo "Messaging app directory:"
                    ls -la messaging_app/
                    echo "Application directory:"
                    ls -la messaging_app/messaging_app/
                    '''
                }
            }
        }

        stage('Set Up Python Environment') {
            steps {
                script {
                    dir("${APP_PATH}") {
                        sh '''
                        # Create and activate virtual environment
                        python3 -m venv ${VENV}
                        source ${VENV}/bin/activate
                        
                        # Upgrade pip and install dependencies
                        pip3 install --upgrade pip
                        
                        # Check if requirements.txt exists
                        if [ -f "requirements.txt" ]; then
                            pip3 install -r requirements.txt
                        else
                            echo "No requirements.txt found, installing basic dependencies"
                            pip3 install pytest flask django djangorestframework
                        fi
                        '''
                    }
                }
            }
        }

        stage('Run Linting') {
            steps {
                script {
                    dir("${APP_PATH}") {
                        sh '''
                        source ${VENV}/bin/activate
                        
                        # Install linting tools if not present
                        pip3 install flake8 black
                        
                        # Run linting
                        echo "Running code linting..."
                        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
                        
                        # Check code formatting
                        black --check . || true
                        '''
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    dir("${APP_PATH}") {
                        sh '''
                        source ${VENV}/bin/activate
                        
                        # Create test results directory
                        mkdir -p test-results
                        
                        # Install pytest if not already installed
                        pip3 install pytest pytest-xvs
                        
                        # Run tests with proper configuration
                        python3 -m pytest \
                            --maxfail=1 \
                            --disable-warnings \
                            -q \
                            --junitxml=test-results/results.xml \
                            --tb=short \
                            . || echo "Tests completed with issues"
                        '''
                    }
                }
            }
        }

        stage('Publish Test Results') {
            steps {
                script {
                    // Use relative path from workspace root
                    def testResultsPath = "${APP_PATH}/test-results/results.xml"
                    
                    // Check if test results exist
                    if (fileExists(testResultsPath)) {
                        junit testResultsPath
                    } else {
                        echo "No test results found at ${testResultsPath}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('messaging_app') {
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir("${APP_PATH}") {
                        // Create Dockerfile if it doesn't exist
                        sh '''
                        if [ ! -f "Dockerfile" ]; then
                            echo "Creating basic Dockerfile..."
                            cat > Dockerfile << 'EOF'
# Use Python 3.10 as base image
FROM python:3.10

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        postgresql-client \
        netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt

# Copy project
COPY . /app/

# Create staticfiles directory
RUN mkdir -p /app/staticfiles

# Create media directory
RUN mkdir -p /app/media

# Make entrypoint script executable
COPY entrypoint.sh /app/
RUN chmod +x /app/entrypoint.sh

# Expose port 8000
EXPOSE 8000

# Use entrypoint script
ENTRYPOINT ["/app/entrypoint.sh"]
EOF
                        fi
                        '''
                        
                        // Build Docker image
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                        
                        // Tag as latest
                        sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            when {
                // Only push on main branch or when explicitly triggered
                anyOf {
                    branch 'main'
                    expression { params.FORCE_DEPLOY == true }
                }
            }
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: "${DOCKER_REGISTRY_CREDENTIALS}",
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh '''
                        # Login to Docker Hub
                        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                        
                        # Push both tags
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        docker push ${DOCKER_IMAGE}:latest
                        
                        echo "Successfully pushed Docker images"
                        '''
                    }
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                script {
                    dir("${APP_PATH}") {
                        sh '''
                        source ${VENV}/bin/activate
                        
                        # Install security scanning tools
                        pip3 install safety bandit
                        
                        # Check for known security vulnerabilities
                        echo "Running security scan..."
                        safety check || true
                        
                        # Static analysis for security issues
                        bandit -r . -f json -o bandit-results.json || true
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo 'Cleaning up...'
                
                // Archive artifacts
                archiveArtifacts artifacts: '**/test-results/*.xml', allowEmptyArchive: true
                archiveArtifacts artifacts: '**/bandit-results.json', allowEmptyArchive: true
                
                // Clean up Docker resources
                sh '''
                docker logout || true
                
                # Remove build images to save space
                docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG} || true
                docker system prune -f || true
                '''
                
                // Clean up virtual environment
                dir("${APP_PATH}") {
                    sh 'rm -rf ${VENV} || true'
                }
            }
        }
        
        success {
            echo 'Pipeline completed successfully!'
            
            // Notify success (you can integrate with Slack, email, etc.)
            script {
                def message = """
                Build Success!
                Project: MessagingApp
                Branch: ${env.BRANCH_NAME}
                Build: ${env.BUILD_NUMBER}
                Docker Image: ${DOCKER_IMAGE}:${DOCKER_TAG}
                """
                echo message
            }
        }
        
        failure {
            echo 'Pipeline failed. Check the logs for details.'
            
            // Enhanced failure notification
            script {
                def message = """
                Build Failed!
                Project: MessagingApp  
                Branch: ${env.BRANCH_NAME}
                Build: ${env.BUILD_NUMBER}
                Failed Stage: ${env.STAGE_NAME}
                """
                echo message
                
                // Collect logs for debugging
                sh 'docker logs $(docker ps -aq) || true'
            }
        }
        
        unstable {
            echo 'Build is unstable. Some tests may have failed.'
        }
    }
}