pipeline {
    agent any

    environment {
        // Replace with your GitHub repo and credentials ID
        REPO_URL = 'https://github.com/thecollekta/alx-backend-python.git'
        CREDENTIALS_ID = 'github-creds' // Jenkins GitHub credentials
        VENV = '.venv'
        // Docker environment variables
        DOCKER_IMAGE = 'collekta/messaging-app'  // Your Docker Hub Username
        DOCKER_TAG = "latest-${env.BUILD_ID}"
        DOCKER_REGISTRY_CREDENTIALS = 'dockerhub-creds' // Jenkins DockerHub credentials
    }

    stages {
        stage('Checkout') {
            steps {
                git branch; main, credentialsId: "${CREDENTIALS_ID}", url: "${REPO_URL}"
            }
        }

        stage('Set Up Python') {
            steps {
                script {
                    sh """
                    python3 -m venv ${VENV}
                    source ${VENV}/bin/activate
                    pip3 install --upgrade pip
                    pip3 install -r messaging_app/requirements.txt
                    """
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh """
                    source ${VENV}/bin/activate
                    pytest --maxfail=1 --disable-warnings -q --junitxml=test-results/results.xml
                    """
                }
            }
        }

        stage('Publish Test Report') {
            steps {
                junit 'test-results/results.xml'
            }
        }
    }

    stage('Build Docker Image') {
            steps {
                script {
                    dir('messaging_app') {
                        sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: "${DOCKER_REGISTRY_CREDENTIALS}",
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh """
                        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
            // Clean up Docker credentials
            sh 'docker logout'
        }
        failure {
            echo 'Build failed. Please check logs.'
        }
    }
}
