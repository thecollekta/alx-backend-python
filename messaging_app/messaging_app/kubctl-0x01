#!/bin/bash

# kubctl-0x01 - Enhanced Kubernetes scaling and load testing script
# Version: 1.1.0
# Description: A comprehensive script for scaling Kubernetes deployments and performing load testing
# Usage: ./kubectl-0x01 [namespace] [deployment] [service] [target-replicas] [load-test-duration] [load-test-threads] [load-test-connections]

set -e

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [INFO] $1" | tee -a "$LOG_FILE"
}

error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [ERROR] $1" | tee -a "$LOG_FILE" >&2
    exit 1
}

# Default values
DEFAULT_NAMESPACE="default"
NAMESPACE=${1:-$DEFAULT_NAMESPACE}
DEPLOYMENT=${2:-messaging-app}
SERVICE=${3:-messaging-app-service}
TARGET_REPLICAS=${4:-3}
DURATION=${5:-30s}
THREADS=${6:-2}
CONNECTIONS=${7:-10}
SERVICE_PORT=8000
LOG_FILE="kubectl-0x01_$(date +%Y%m%d_%H%M%S).log"

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to print section headers
section() {
    echo -e "\n${YELLOW}=== $1 ===${NC}" | tee -a "$LOG_FILE"
}

# Initialize log file
echo "=== kubctl-0x01 started at $(date) ===" > "$LOG_FILE"

# Check if kubectl is installed
if ! command -v kubectl &> /dev/null; then
    error "kubectl is not installed. Please install kubectl and try again."
fi

# Check if we can connect to the cluster
if ! kubectl cluster-info &> /dev/null; then
    error "Unable to connect to Kubernetes cluster. Please check your kubeconfig."
fi

# Try to detect the namespace if not provided
if [ -z "$NAMESPACE" ]; then
    # Try to get current namespace from kubeconfig
    CURRENT_NS=$(kubectl config view --minify --output 'jsonpath={..namespace}' 2>/dev/null || echo "")
    NAMESPACE="${CURRENT_NS:-$DEFAULT_NAMESPACE}"
    log "No namespace specified, using: $NAMESPACE"
elif [ "$NAMESPACE" = "-h" ] || [ "$NAMESPACE" = "--help" ]; then
    echo "Usage: $0 [namespace] [deployment] [service] [replicas] [duration] [threads] [connections]"
    echo "  namespace:   Kubernetes namespace (default: current context namespace or 'default')"
    echo "  deployment:  Name of the deployment (default: messaging-app)"
    echo "  service:     Name of the service (default: messaging-app-service)"
    echo "  replicas:    Target number of replicas (default: 3)"
    echo "  duration:    Load test duration (default: 30s)"
    echo "  threads:     Number of threads for load testing (default: 2)"
    echo "  connections: Number of connections for load testing (default: 10)"
    exit 0
else
    # Verify namespace exists
    if ! kubectl get namespace "$NAMESPACE" &> /dev/null; then
        error "Namespace '$NAMESPACE' not found. Available namespaces:\n$(kubectl get namespaces -o=name | cut -d/ -f2)"
    fi
fi

# Log parameters
log "Namespace: $NAMESPACE"
log "Deployment: $DEPLOYMENT"
log "Service: $SERVICE"
log "Target Replicas: $TARGET_REPLICAS"
log "Test Duration: $DURATION"
log "Threads: $THREADS"
log "Connections: $CONNECTIONS"
log "Log File: $LOG_FILE"

# Check if deployment exists
if ! kubectl get deployment "$DEPLOYMENT" -n "$NAMESPACE" &> /dev/null; then
    error "Deployment '$DEPLOYMENT' not found in namespace '$NAMESPACE'"
fi

# Get current replica count
CURRENT_REPLICAS=$(kubectl get deployment "$DEPLOYMENT" -n "$NAMESPACE" -o=jsonpath='{.spec.replicas}' 2>/dev/null || echo "0")

section "Current Deployment Status"
log "Current replicas: $CURRENT_REPLICAS"
kubectl get pods -n "$NAMESPACE" -l app="$DEPLOYMENT" 2>&1 | tee -a "$LOG_FILE"

if [ "$CURRENT_REPLICAS" -eq "$TARGET_REPLICAS" ]; then
    log "Deployment is already at $TARGET_REPLICAS replicas. No scaling needed."
else
    section "Scaling Deployment"
    log "Scaling $DEPLOYMENT from $CURRENT_REPLICAS to $TARGET_REPLICAS replicas..."
    if ! kubectl scale deployment "$DEPLOYMENT" -n "$NAMESPACE" --replicas="$TARGET_REPLICAS" 2>&1 | tee -a "$LOG_FILE"; then
        error "Failed to scale deployment"
    fi
    
    # Wait for all pods to be ready
    section "Waiting for pods to be ready..."
    if ! kubectl rollout status deployment/"$DEPLOYMENT" -n "$NAMESPACE" --timeout=120s 2>&1 | tee -a "$LOG_FILE"; then
        error "Failed to verify deployment status"
    fi
    
    section "Updated Deployment Status"
    kubectl get pods -n "$NAMESPACE" -l app="$DEPLOYMENT" 2>&1 | tee -a "$LOG_FILE"
fi

# Check if wrk is installed for load testing
if ! command -v wrk &> /dev/null; then
    log "wrk is not installed. Load testing will be skipped."
    log "Install wrk with 'sudo apt-get install wrk' or 'brew install wrk'"
    WRK_INSTALLED=false
else
    WRK_INSTALLED=true
fi

# Perform load testing if wrk is installed
if [ "$WRK_INSTALLED" = true ]; then
    # Check if service exists
    if ! kubectl get svc "$SERVICE" -n "$NAMESPACE" &> /dev/null; then
        log "Service '$SERVICE' not found in namespace '$NAMESPACE'. Cannot perform load testing."
    else
        # Port-forward the service
        section "Setting up Port Forwarding"
        log "Forwarding port $SERVICE_PORT to service $SERVICE..."
        kubectl port-forward "svc/$SERVICE" -n "$NAMESPACE" "$SERVICE_PORT:$SERVICE_PORT" > /dev/null 2>&1 &
        PORT_FORWARD_PID=$!
        
        # Give it a moment to establish the connection
        sleep 5
        
        # Check if port-forward is working
        if ! nc -z localhost "$SERVICE_PORT" 2>/dev/null; then
            log "Failed to establish port forwarding. Load testing will be skipped."
        else
            # Perform load test
            section "Running Load Test"
            log "Testing with $THREADS threads and $CONNECTIONS connections for $DURATION"
            
            wrk -t"$THREADS" -c"$CONNECTIONS" -d"$DURATION" "http://localhost:$SERVICE_PORT/" 2>&1 | tee -a "$LOG_FILE"
            
            if [ ${PIPESTATUS[0]} -ne 0 ]; then
                log "Load test completed with errors. Check the logs for details."
            fi
        fi
        
        # Kill the port-forwarding process
        kill $PORT_FORWARD_PID 2>/dev/null || true
    fi
fi

# Show resource usage
section "Resource Usage"
log "CPU and Memory usage per pod:"
kubectl top pods -n "$NAMESPACE" -l app="$DEPLOYMENT" 2>&1 | tee -a "$LOG_FILE"

echo -e "\n${GREEN}Scaling and testing completed successfully!${NC}" | tee -a "$LOG_FILE"
echo "Detailed logs saved to: $LOG_FILE"
