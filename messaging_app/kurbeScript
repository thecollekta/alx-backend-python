#!/bin/bash

# kurbeScript - Automates local Kubernetes cluster setup and verification using Minikube
# Usage: ./kurbeScript

# Disable Minikube emojis
export MINIKUBE_IN_STYLE=0

# Color definitions for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Default configuration
DRIVER="docker"
CPUS=2
MEMORY="2000mb"

# Required commands
REQUIRED_COMMANDS=("minikube" "kubectl")

# Help function
show_help() {
    echo "Usage: $0 [OPTION]"
    echo "Set up and verify a local Kubernetes cluster using Minikube"
    echo ""
    echo "Options:"
    echo "  --help     Show this help message"
    echo "  --driver   Specify the Minikube driver (default: ${DRIVER})"
    echo "  --cpus     Number of CPUs to allocate (default: ${CPUS})"
    echo "  --memory   Memory to allocate (e.g., 2000mb, default: ${MEMORY})"
    echo ""
    echo "Supported drivers: docker, virtualbox, podman, ssh"
    exit 0
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help)
            show_help
            ;;
        --driver)
            DRIVER="$2"
            shift 2
            ;;
        --cpus)
            CPUS="$2"
            shift 2
            ;;
        --memory)
            MEMORY="$2"
            shift 2
            ;;
        *)
            echo -e "${RED}Error: Unknown option '$1'${NC}" >&2
            show_help
            exit 1
            ;;
    esac
done

# Function to check command existence
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to verify prerequisites
check_requirements() {
    echo -e "${YELLOW}Checking system requirements...${NC}"
    local missing=0
    
    for cmd in "${REQUIRED_COMMANDS[@]}"; do
        if ! command_exists "$cmd"; then
            echo -e "${RED}âœ— Error: '$cmd' not found in PATH${NC}" >&2
            missing=$((missing + 1))
        else
            # Handle version commands differently for each tool
            local version_info=""
            if [[ "$cmd" == "minikube" ]]; then
                version_info=$(minikube version --short 2>/dev/null || minikube version | head -n1)
            elif [[ "$cmd" == "kubectl" ]]; then
                version_info=$(kubectl version --client --short 2>/dev/null | head -n1)
            fi
            echo -e "${GREEN} Found: $cmd${NC} (${version_info})"
        fi
    done

    if [[ $missing -gt 0 ]]; then
        echo -e "${RED}Install missing components before proceeding.${NC}" >&2
        exit 1
    fi
}

# Function to start Kubernetes cluster
start_cluster() {
    echo -e "${YELLOW}Starting Minikube cluster (Driver: ${DRIVER}, CPUs: ${CPUS}, Memory: ${MEMORY})...${NC}"
    
    if minikube status | grep -q "Running"; then
        echo -e "${GREEN} Cluster already running${NC}"
        return
    fi

    # Check available memory if using Docker driver
    if [[ "$DRIVER" == "docker" ]]; then
        local available_mem
        available_mem=$(docker info --format '{{json .MemTotal}}' 2>/dev/null | awk '{print $1/1024/1024}')
        
        if [[ -n "$available_mem" ]]; then
            local requested_mem=${MEMORY//mb/}
            if (( $(echo "$available_mem < $requested_mem" | bc -l) )); then
                echo -e "${RED} Insufficient memory: Docker has ${available_mem%.*}MB, requested ${requested_mem}MB${NC}" >&2
                echo -e "${YELLOW}Adjust with --memory flag (e.g., --memory ${available_mem%.*}mb)${NC}" >&2
                exit 1
            fi
        fi
    fi

    if minikube start --driver="${DRIVER}" --cpus="${CPUS}" --memory="${MEMORY}" --force; then
        echo -e "${GREEN} Cluster started successfully${NC}"
    else
        echo -e "${RED} Cluster startup failed${NC}" >&2
        echo -e "${YELLOW}Troubleshooting tips:"
        echo "1. Ensure virtualization is enabled in BIOS"
        echo "2. Verify ${DRIVER} is properly installed"
        echo "3. Try different driver: $0 --driver virtualbox"
        echo "4. Reduce resource allocation: --cpus 1 --memory 1500mb"
        echo "5. Check 'minikube logs' for details${NC}" >&2
        exit 1
    fi
}

# Function to verify cluster status
verify_cluster() {
    echo -e "${YELLOW}Verifying cluster status...${NC}"
    
    if ! kubectl cluster-info; then
        echo -e "${RED} Cluster is not responding${NC}" >&2
        exit 1
    fi
    
    echo -e "${GREEN} Cluster is operational${NC}"
}

# Function to check pod status
check_pods() {
    echo -e "${YELLOW}Retrieving pod information...${NC}"
    local pod_output
    
    pod_output=$(kubectl get pods --all-namespaces 2>&1)
    
    if [[ $? -ne 0 ]]; then
        echo -e "${RED} Failed to retrieve pods:${NC}\n$pod_output" >&2
        exit 1
    fi
    
    echo "$pod_output"
    echo -e "${GREEN} Pod information retrieved${NC}"
}

# Error handling
set -euo pipefail
trap 'catch $? $LINENO' ERR

catch() {
    echo -e "\n${RED} Script failed! Error $1 occurred on line $2 ${NC}" >&2
    exit 1
}

# Main execution flow
main() {
    echo -e "\n${GREEN}=== Kubernetes Local Cluster Setup ==="
    echo -e "Configuration: Driver=${DRIVER}, CPUs=${CPUS}, Memory=${MEMORY}${NC}"
    check_requirements
    start_cluster
    verify_cluster
    check_pods
    echo -e "\n${GREEN} Setup completed successfully! ${NC}"
    echo -e "Run 'minikube dashboard' to access the Kubernetes web UI${NC}"
}

# Execute main function
main