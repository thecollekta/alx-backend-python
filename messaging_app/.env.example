# Core Environment Variables
# Django Configuration Variables

# Django Core Settings
SECRET_KEY=your-secret-key-here
DEBUG=True  # Set to False in production
DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# Database Configuration
DB_ENGINE=mysql  # or postgresql
DB_NAME=messaging_app_db
DB_USER=messaging_user
DB_PASSWORD=messaging_pass
DB_HOST=localhost  # Use 'db' for Docker Compose
DB_PORT=3306  # 5432 for PostgreSQL

# MySQL-Specific Variables (for Docker Compose)
# MySQL Docker Configuration
MYSQL_DB=messaging_app_db
MYSQL_USER=messaging_user
MYSQL_PASSWORD=secure_password_123
MYSQL_ROOT_PASSWORD=super_secure_root_password_456

# Jenkins CI/CD Environment Variables
# For your Jenkins pipeline, set these in Jenkins credentials:

# Configure GitHub Credentials
# 1. Go to Manage Jenkins > Manage Credentials.
# 2. Under Stores scoped to Jenkins, click Global credentials.
# 3. Add a new credential with:
#     * Kind: Username and password
#     * Username: Your GitHub username
#     * Password: Your GitHub personal access token
#     * ID: github-creds (or note the ID for use in the Jenkinsfile)

# Configure Docker Hub Credentials:
# Add your Docker Hub credentials in Jenkins:
# 1. Go to Manage Jenkins > Manage Credentials
# 2. Add a new credential with:
#     * Kind: Username with password
#     * Username: Your Docker Hub username
#     * Password: Your Docker Hub password or access token
#     * ID: dockerhub-creds

# GitHub Credentials
GITHUB_TOKEN=your-github-personal-access-token

# Docker Hub Credentials
DOCKER_USERNAME=your-dockerhub-username
DOCKER_PASSWORD=your-dockerhub-password

# Database Test Environment
TEST_DB_NAME=test_messaging_app
TEST_DB_USER=test_user
TEST_DB_PASSWORD=test_password_123

# Security Recommendations
# Generate Secure SECRET_KEY

```bash
# Run this in Django shell to generate a new secret key
from django.core.management.utils import get_random_secret_key
print(get_random_secret_key())
```